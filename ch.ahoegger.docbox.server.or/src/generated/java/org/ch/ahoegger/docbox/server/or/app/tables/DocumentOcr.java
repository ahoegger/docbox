/*
 * This file is generated by jOOQ.
*/
package org.ch.ahoegger.docbox.server.or.app.tables;


import ch.ahoegger.docbox.server.or.generator.converter.LongConverter;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.ch.ahoegger.docbox.server.or.app.App;
import org.ch.ahoegger.docbox.server.or.app.Keys;
import org.ch.ahoegger.docbox.server.or.app.tables.records.DocumentOcrRecord;
import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentOcr extends TableImpl<DocumentOcrRecord> {

    private static final long serialVersionUID = -235825487;

    /**
     * The reference instance of <code>APP.DOCUMENT_OCR</code>
     */
    public static final DocumentOcr DOCUMENT_OCR = new DocumentOcr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentOcrRecord> getRecordType() {
        return DocumentOcrRecord.class;
    }

    /**
     * The column <code>APP.DOCUMENT_OCR.DOCUMENT_NR</code>.
     */
    public final TableField<DocumentOcrRecord, BigDecimal> DOCUMENT_NR = createField("DOCUMENT_NR", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new LongConverter());

    /**
     * The column <code>APP.DOCUMENT_OCR.TEXT</code>.
     */
    public final TableField<DocumentOcrRecord, String> TEXT = createField("TEXT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>APP.DOCUMENT_OCR.OCR_SCANNED</code>.
     */
    public final TableField<DocumentOcrRecord, Boolean> OCR_SCANNED = createField("OCR_SCANNED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>APP.DOCUMENT_OCR.PARSE_COUNT</code>.
     */
    public final TableField<DocumentOcrRecord, Integer> PARSE_COUNT = createField("PARSE_COUNT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>APP.DOCUMENT_OCR.FAILED_REASON</code>.
     */
    public final TableField<DocumentOcrRecord, String> FAILED_REASON = createField("FAILED_REASON", org.jooq.impl.SQLDataType.VARCHAR.length(2400), this, "");

    /**
     * Create a <code>APP.DOCUMENT_OCR</code> table reference
     */
    public DocumentOcr() {
        this("DOCUMENT_OCR", null);
    }

    /**
     * Create an aliased <code>APP.DOCUMENT_OCR</code> table reference
     */
    public DocumentOcr(String alias) {
        this(alias, DOCUMENT_OCR);
    }

    private DocumentOcr(String alias, Table<DocumentOcrRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentOcr(String alias, Table<DocumentOcrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return App.APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocumentOcrRecord> getPrimaryKey() {
        return Keys.SQL181122110600280;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocumentOcrRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentOcrRecord>>asList(Keys.SQL181122110600280);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentOcr as(String alias) {
        return new DocumentOcr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentOcr rename(String name) {
        return new DocumentOcr(name, null);
    }
}
