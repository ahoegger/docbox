/*
 * This file is generated by jOOQ.
*/
package org.ch.ahoegger.docbox.server.or.app.tables;


import ch.ahoegger.docbox.server.or.generator.converter.DateConverter;
import ch.ahoegger.docbox.server.or.generator.converter.LongConverter;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.ch.ahoegger.docbox.server.or.app.App;
import org.ch.ahoegger.docbox.server.or.app.Keys;
import org.ch.ahoegger.docbox.server.or.app.tables.records.StatementRecord;
import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statement extends TableImpl<StatementRecord> {

    private static final long serialVersionUID = -1206463787;

    /**
     * The reference instance of <code>APP.STATEMENT</code>
     */
    public static final Statement STATEMENT = new Statement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementRecord> getRecordType() {
        return StatementRecord.class;
    }

    /**
     * The column <code>APP.STATEMENT.STATEMENT_NR</code>.
     */
    public final TableField<StatementRecord, BigDecimal> STATEMENT_NR = createField("STATEMENT_NR", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new LongConverter());

    /**
     * The column <code>APP.STATEMENT.PARTNER_NR</code>.
     */
    public final TableField<StatementRecord, BigDecimal> PARTNER_NR = createField("PARTNER_NR", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new LongConverter());

    /**
     * The column <code>APP.STATEMENT.STATEMENT_DATE</code>.
     */
    public final TableField<StatementRecord, Date> STATEMENT_DATE = createField("STATEMENT_DATE", org.jooq.impl.SQLDataType.DATE, this, "", new DateConverter());

    /**
     * The column <code>APP.STATEMENT.ACCOUNT_NUMBER</code>.
     */
    public final TableField<StatementRecord, String> ACCOUNT_NUMBER = createField("ACCOUNT_NUMBER", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>APP.STATEMENT.TAX_TYPE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> TAX_TYPE = createField("TAX_TYPE", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new LongConverter());

    /**
     * The column <code>APP.STATEMENT.HOURLY_WAGE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> HOURLY_WAGE = createField("HOURLY_WAGE", org.jooq.impl.SQLDataType.DECIMAL.precision(5, 2), this, "");

    /**
     * The column <code>APP.STATEMENT.SOCIAL_INSURANCE_RATE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> SOCIAL_INSURANCE_RATE = createField("SOCIAL_INSURANCE_RATE", org.jooq.impl.SQLDataType.DECIMAL.precision(5, 3), this, "");

    /**
     * The column <code>APP.STATEMENT.SOURCE_TAX_RATE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> SOURCE_TAX_RATE = createField("SOURCE_TAX_RATE", org.jooq.impl.SQLDataType.DECIMAL.precision(5, 3), this, "");

    /**
     * The column <code>APP.STATEMENT.VACATION_EXTRA_RATE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> VACATION_EXTRA_RATE = createField("VACATION_EXTRA_RATE", org.jooq.impl.SQLDataType.DECIMAL.precision(5, 3), this, "");

    /**
     * The column <code>APP.STATEMENT.WORKING_HOURS</code>.
     */
    public final TableField<StatementRecord, BigDecimal> WORKING_HOURS = createField("WORKING_HOURS", org.jooq.impl.SQLDataType.DECIMAL.precision(9, 2), this, "");

    /**
     * The column <code>APP.STATEMENT.BRUTTO_WAGE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> BRUTTO_WAGE = createField("BRUTTO_WAGE", org.jooq.impl.SQLDataType.DECIMAL.precision(9, 2), this, "");

    /**
     * The column <code>APP.STATEMENT.NETTO_WAGE</code>.
     */
    public final TableField<StatementRecord, BigDecimal> NETTO_WAGE = createField("NETTO_WAGE", org.jooq.impl.SQLDataType.DECIMAL.precision(9, 2), this, "");

    /**
     * The column <code>APP.STATEMENT.SOURCE_TAX</code>.
     */
    public final TableField<StatementRecord, BigDecimal> SOURCE_TAX = createField("SOURCE_TAX", org.jooq.impl.SQLDataType.DECIMAL.precision(9, 2), this, "");

    /**
     * The column <code>APP.STATEMENT.SOCIAL_SECURITY_TAX</code>.
     */
    public final TableField<StatementRecord, BigDecimal> SOCIAL_SECURITY_TAX = createField("SOCIAL_SECURITY_TAX", org.jooq.impl.SQLDataType.DECIMAL.precision(9, 2), this, "");

    /**
     * The column <code>APP.STATEMENT.VACATION_EXTRA</code>.
     */
    public final TableField<StatementRecord, BigDecimal> VACATION_EXTRA = createField("VACATION_EXTRA", org.jooq.impl.SQLDataType.DECIMAL.precision(9, 2), this, "");

    /**
     * Create a <code>APP.STATEMENT</code> table reference
     */
    public Statement() {
        this("STATEMENT", null);
    }

    /**
     * Create an aliased <code>APP.STATEMENT</code> table reference
     */
    public Statement(String alias) {
        this(alias, STATEMENT);
    }

    private Statement(String alias, Table<StatementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statement(String alias, Table<StatementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return App.APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StatementRecord> getPrimaryKey() {
        return Keys.SQL181122110600530;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StatementRecord>> getKeys() {
        return Arrays.<UniqueKey<StatementRecord>>asList(Keys.SQL181122110600530);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Statement as(String alias) {
        return new Statement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statement rename(String name) {
        return new Statement(name, null);
    }
}
