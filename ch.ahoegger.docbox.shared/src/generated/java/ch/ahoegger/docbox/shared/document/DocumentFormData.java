package ch.ahoegger.docbox.shared.document;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Set;

import javax.annotation.Generated;

import org.eclipse.scout.rt.platform.resource.BinaryResource;
import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "ch.ahoegger.docbox.client.document.DocumentForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class DocumentFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public Abstract getAbstract() {
    return getFieldByClass(Abstract.class);
  }

  public CapturedDate getCapturedDate() {
    return getFieldByClass(CapturedDate.class);
  }

  public CategoriesBox getCategoriesBox() {
    return getFieldByClass(CategoriesBox.class);
  }

  public Conversation getConversation() {
    return getFieldByClass(Conversation.class);
  }

  public Document getDocument() {
    return getFieldByClass(Document.class);
  }

  public DocumentDate getDocumentDate() {
    return getFieldByClass(DocumentDate.class);
  }

  /**
   * access method for property DocumentId.
   */
  public BigDecimal getDocumentId() {
    return getDocumentIdProperty().getValue();
  }

  /**
   * access method for property DocumentId.
   */
  public void setDocumentId(BigDecimal documentId) {
    getDocumentIdProperty().setValue(documentId);
  }

  public DocumentIdProperty getDocumentIdProperty() {
    return getPropertyByClass(DocumentIdProperty.class);
  }

  /**
   * access method for property DocumentPath.
   */
  public String getDocumentPath() {
    return getDocumentPathProperty().getValue();
  }

  /**
   * access method for property DocumentPath.
   */
  public void setDocumentPath(String documentPath) {
    getDocumentPathProperty().setValue(documentPath);
  }

  public DocumentPathProperty getDocumentPathProperty() {
    return getPropertyByClass(DocumentPathProperty.class);
  }

  /**
   * access method for property HasOcrText.
   */
  public Boolean getHasOcrText() {
    return getHasOcrTextProperty().getValue();
  }

  /**
   * access method for property HasOcrText.
   */
  public void setHasOcrText(Boolean hasOcrText) {
    getHasOcrTextProperty().setValue(hasOcrText);
  }

  public HasOcrTextProperty getHasOcrTextProperty() {
    return getPropertyByClass(HasOcrTextProperty.class);
  }

  public OcrLanguage getOcrLanguage() {
    return getFieldByClass(OcrLanguage.class);
  }

  public OriginalStorage getOriginalStorage() {
    return getFieldByClass(OriginalStorage.class);
  }

  public ParseOcr getParseOcr() {
    return getFieldByClass(ParseOcr.class);
  }

  public Partners getPartners() {
    return getFieldByClass(Partners.class);
  }

  public Permissions getPermissions() {
    return getFieldByClass(Permissions.class);
  }

  public ValidDate getValidDate() {
    return getFieldByClass(ValidDate.class);
  }

  public static class Abstract extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class CapturedDate extends AbstractValueFieldData<Date> {

    private static final long serialVersionUID = 1L;
  }

  public static class CategoriesBox extends AbstractValueFieldData<Set<BigDecimal>> {

    private static final long serialVersionUID = 1L;
  }

  public static class Conversation extends AbstractValueFieldData<BigDecimal> {

    private static final long serialVersionUID = 1L;
  }

  public static class Document extends AbstractValueFieldData<BinaryResource> {

    private static final long serialVersionUID = 1L;
  }

  public static class DocumentDate extends AbstractValueFieldData<Date> {

    private static final long serialVersionUID = 1L;
  }

  public static class DocumentIdProperty extends AbstractPropertyData<BigDecimal> {

    private static final long serialVersionUID = 1L;
  }

  public static class DocumentPathProperty extends AbstractPropertyData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class HasOcrTextProperty extends AbstractPropertyData<Boolean> {

    private static final long serialVersionUID = 1L;
  }

  public static class OcrLanguage extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class OriginalStorage extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class ParseOcr extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;
  }

  public static class Partners extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    @Override
    public PartnersRowData addRow() {
      return (PartnersRowData) super.addRow();
    }

    @Override
    public PartnersRowData addRow(int rowState) {
      return (PartnersRowData) super.addRow(rowState);
    }

    @Override
    public PartnersRowData createRow() {
      return new PartnersRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return PartnersRowData.class;
    }

    @Override
    public PartnersRowData[] getRows() {
      return (PartnersRowData[]) super.getRows();
    }

    @Override
    public PartnersRowData rowAt(int index) {
      return (PartnersRowData) super.rowAt(index);
    }

    public void setRows(PartnersRowData[] rows) {
      super.setRows(rows);
    }

    public static class PartnersRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String partner = "partner";
      private BigDecimal m_partner;

      public BigDecimal getPartner() {
        return m_partner;
      }

      public void setPartner(BigDecimal newPartner) {
        m_partner = newPartner;
      }
    }
  }

  public static class Permissions extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    @Override
    public PermissionsRowData addRow() {
      return (PermissionsRowData) super.addRow();
    }

    @Override
    public PermissionsRowData addRow(int rowState) {
      return (PermissionsRowData) super.addRow(rowState);
    }

    @Override
    public PermissionsRowData createRow() {
      return new PermissionsRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return PermissionsRowData.class;
    }

    @Override
    public PermissionsRowData[] getRows() {
      return (PermissionsRowData[]) super.getRows();
    }

    @Override
    public PermissionsRowData rowAt(int index) {
      return (PermissionsRowData) super.rowAt(index);
    }

    public void setRows(PermissionsRowData[] rows) {
      super.setRows(rows);
    }

    public static class PermissionsRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String user = "user";
      public static final String permission = "permission";
      private String m_user;
      private Integer m_permission;

      public String getUser() {
        return m_user;
      }

      public void setUser(String newUser) {
        m_user = newUser;
      }

      public Integer getPermission() {
        return m_permission;
      }

      public void setPermission(Integer newPermission) {
        m_permission = newPermission;
      }
    }
  }

  public static class ValidDate extends AbstractValueFieldData<Date> {

    private static final long serialVersionUID = 1L;
  }
}
